
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000815  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065a  00000000  00000000  00000b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044c  00000000  00000000  00001197  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000289  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001c72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	97 d0       	rcall	.+302    	; 0x172 <main>
  44:	db c0       	rjmp	.+438    	; 0x1fc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <getRowData.1732>:
	while (bit_is_clear(UCSRA, UDRE));	// Wait until all data is transmitted.
}

void uartTransmitS(char *p)
{
	while(*p)
  48:	2f 92       	push	r2
  4a:	3f 92       	push	r3
  4c:	f1 01       	movw	r30, r2
  4e:	82 9b       	sbis	0x10, 2	; 16
  50:	07 c0       	rjmp	.+14     	; 0x60 <getRowData.1732+0x18>
  52:	a0 81       	ld	r26, Z
  54:	b1 81       	ldd	r27, Z+1	; 0x01
  56:	a0 5a       	subi	r26, 0xA0	; 160
  58:	bf 4f       	sbci	r27, 0xFF	; 255
  5a:	8c 91       	ld	r24, X
  5c:	81 60       	ori	r24, 0x01	; 1
  5e:	8c 93       	st	X, r24
  60:	83 9b       	sbis	0x10, 3	; 16
  62:	07 c0       	rjmp	.+14     	; 0x72 <getRowData.1732+0x2a>
  64:	a0 81       	ld	r26, Z
  66:	b1 81       	ldd	r27, Z+1	; 0x01
  68:	a0 5a       	subi	r26, 0xA0	; 160
  6a:	bf 4f       	sbci	r27, 0xFF	; 255
  6c:	8c 91       	ld	r24, X
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	8c 93       	st	X, r24
  72:	b6 9b       	sbis	0x16, 6	; 22
  74:	07 c0       	rjmp	.+14     	; 0x84 <getRowData.1732+0x3c>
  76:	a0 81       	ld	r26, Z
  78:	b1 81       	ldd	r27, Z+1	; 0x01
  7a:	a0 5a       	subi	r26, 0xA0	; 160
  7c:	bf 4f       	sbci	r27, 0xFF	; 255
  7e:	8c 91       	ld	r24, X
  80:	84 60       	ori	r24, 0x04	; 4
  82:	8c 93       	st	X, r24
  84:	b7 99       	sbic	0x16, 7	; 22
  86:	20 c0       	rjmp	.+64     	; 0xc8 <getRowData.1732+0x80>
  88:	85 9b       	sbis	0x10, 5	; 16
  8a:	07 c0       	rjmp	.+14     	; 0x9a <getRowData.1732+0x52>
  8c:	a0 81       	ld	r26, Z
  8e:	b1 81       	ldd	r27, Z+1	; 0x01
  90:	a0 5a       	subi	r26, 0xA0	; 160
  92:	bf 4f       	sbci	r27, 0xFF	; 255
  94:	8c 91       	ld	r24, X
  96:	80 61       	ori	r24, 0x10	; 16
  98:	8c 93       	st	X, r24
  9a:	86 9b       	sbis	0x10, 6	; 16
  9c:	07 c0       	rjmp	.+14     	; 0xac <getRowData.1732+0x64>
  9e:	a0 81       	ld	r26, Z
  a0:	b1 81       	ldd	r27, Z+1	; 0x01
  a2:	a0 5a       	subi	r26, 0xA0	; 160
  a4:	bf 4f       	sbci	r27, 0xFF	; 255
  a6:	8c 91       	ld	r24, X
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	8c 93       	st	X, r24
  ac:	87 9b       	sbis	0x10, 7	; 16
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <getRowData.1732+0x78>
  b0:	01 90       	ld	r0, Z+
  b2:	f0 81       	ld	r31, Z
  b4:	e0 2d       	mov	r30, r0
  b6:	e0 5a       	subi	r30, 0xA0	; 160
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	86 b3       	in	r24, 0x16	; 22
  c2:	3f 90       	pop	r3
  c4:	2f 90       	pop	r2
  c6:	08 95       	ret
  c8:	a0 81       	ld	r26, Z
  ca:	b1 81       	ldd	r27, Z+1	; 0x01
  cc:	a0 5a       	subi	r26, 0xA0	; 160
  ce:	bf 4f       	sbci	r27, 0xFF	; 255
  d0:	8c 91       	ld	r24, X
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	8c 93       	st	X, r24
  d6:	d8 cf       	rjmp	.-80     	; 0x88 <getRowData.1732+0x40>

000000d8 <getButtons>:
  d8:	2f 92       	push	r2
  da:	3f 92       	push	r3
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <getButtons+0xe>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	9a 83       	std	Y+2, r25	; 0x02
  ec:	89 83       	std	Y+1, r24	; 0x01
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	91 05       	cpc	r25, r1
  f2:	c1 f1       	breq	.+112    	; 0x164 <getButtons+0x8c>
  f4:	ac f0       	brlt	.+42     	; 0x120 <getButtons+0x48>
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	91 05       	cpc	r25, r1
  fa:	e9 f0       	breq	.+58     	; 0x136 <getButtons+0x5e>
  fc:	5c f1       	brlt	.+86     	; 0x154 <getButtons+0x7c>
  fe:	05 97       	sbiw	r24, 0x05	; 5
 100:	31 f4       	brne	.+12     	; 0x10e <getButtons+0x36>
 102:	a9 9a       	sbi	0x15, 1	; 21
 104:	ce 01       	movw	r24, r28
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	1c 01       	movw	r2, r24
 10a:	9e df       	rcall	.-196    	; 0x48 <getRowData.1732>
 10c:	a9 98       	cbi	0x15, 1	; 21
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	3f 90       	pop	r3
 11c:	2f 90       	pop	r2
 11e:	08 95       	ret
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	89 f0       	breq	.+34     	; 0x146 <getButtons+0x6e>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	99 f7       	brne	.-26     	; 0x10e <getButtons+0x36>
 128:	c2 9a       	sbi	0x18, 2	; 24
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	1c 01       	movw	r2, r24
 130:	8b df       	rcall	.-234    	; 0x48 <getRowData.1732>
 132:	c2 98       	cbi	0x18, 2	; 24
 134:	ec cf       	rjmp	.-40     	; 0x10e <getButtons+0x36>
 136:	8e 01       	movw	r16, r28
 138:	0f 5f       	subi	r16, 0xFF	; 255
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
 13c:	a8 9a       	sbi	0x15, 0	; 21
 13e:	18 01       	movw	r2, r16
 140:	83 df       	rcall	.-250    	; 0x48 <getRowData.1732>
 142:	a8 98       	cbi	0x15, 0	; 21
 144:	e4 cf       	rjmp	.-56     	; 0x10e <getButtons+0x36>
 146:	c1 9a       	sbi	0x18, 1	; 24
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	1c 01       	movw	r2, r24
 14e:	7c df       	rcall	.-264    	; 0x48 <getRowData.1732>
 150:	c1 98       	cbi	0x18, 1	; 24
 152:	dd cf       	rjmp	.-70     	; 0x10e <getButtons+0x36>
 154:	c4 9a       	sbi	0x18, 4	; 24
 156:	8e 01       	movw	r16, r28
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	1f 4f       	sbci	r17, 0xFF	; 255
 15c:	18 01       	movw	r2, r16
 15e:	74 df       	rcall	.-280    	; 0x48 <getRowData.1732>
 160:	c4 98       	cbi	0x18, 4	; 24
 162:	ec cf       	rjmp	.-40     	; 0x13c <getButtons+0x64>
 164:	c3 9a       	sbi	0x18, 3	; 24
 166:	ce 01       	movw	r24, r28
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	1c 01       	movw	r2, r24
 16c:	6d df       	rcall	.-294    	; 0x48 <getRowData.1732>
 16e:	c3 98       	cbi	0x18, 3	; 24
 170:	ce cf       	rjmp	.-100    	; 0x10e <getButtons+0x36>

00000172 <main>:
	}
}

void uartInit(void) 
{
	set_bit(UCSRB, TXEN);	// Enable UART transmitter mode
 172:	53 9a       	sbi	0x0a, 3	; 10
	set_bit(UCSRC, URSEL);	// Register select
 174:	80 b5       	in	r24, 0x20	; 32
 176:	80 68       	ori	r24, 0x80	; 128
 178:	80 bd       	out	0x20, r24	; 32
	set_bit(UCSRC, UCSZ0);	
 17a:	80 b5       	in	r24, 0x20	; 32
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	80 bd       	out	0x20, r24	; 32
	set_bit(UCSRC, UCSZ1);	// Select 8-bit packet mode
 180:	80 b5       	in	r24, 0x20	; 32
 182:	84 60       	ori	r24, 0x04	; 4
 184:	80 bd       	out	0x20, r24	; 32
	UBRRL = 51;				// Set baud rate (9600)
 186:	83 e3       	ldi	r24, 0x33	; 51
 188:	89 b9       	out	0x09, r24	; 9
{
	uartInit();
/*	Setting the Data Direction Registers (DDRx)
	0 - Input, 1 - Output					*/
	
	DDRB = 0b00011110;
 18a:	8e e1       	ldi	r24, 0x1E	; 30
 18c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b00000011;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000010;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	81 bb       	out	0x11, r24	; 17
 196:	06 e6       	ldi	r16, 0x66	; 102
 198:	10 e0       	ldi	r17, 0x00	; 0
	UBRRL = 51;				// Set baud rate (9600)
}

void uartTransmitC(unsigned char data)
{
	UDR = data;							// Putting data into *U*ART *D*ata *R*egister
 19a:	8d e0       	ldi	r24, 0x0D	; 13
 19c:	f8 2e       	mov	r15, r24
	DDRC = 0b00000011;
	DDRD = 0b00000010;
    while (1) 
    {
		start:
		for (int i = 0; i < 6; i++)
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			getButtons(i);
 1a2:	ce 01       	movw	r24, r28
 1a4:	99 df       	rcall	.-206    	; 0xd8 <getButtons>
	DDRC = 0b00000011;
	DDRD = 0b00000010;
    while (1) 
    {
		start:
		for (int i = 0; i < 6; i++)
 1a6:	21 96       	adiw	r28, 0x01	; 1
 1a8:	c6 30       	cpi	r28, 0x06	; 6
 1aa:	d1 05       	cpc	r29, r1
 1ac:	d1 f7       	brne	.-12     	; 0x1a2 <main+0x30>
 1ae:	a0 e6       	ldi	r26, 0x60	; 96
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
			getButtons(i);
		}
		
		for (int i = 0; i < 6; i++)
		{
			uartTransmitS(dataToMPU[i]);
 1b2:	ed 91       	ld	r30, X+
	while (bit_is_clear(UCSRA, UDRE));	// Wait until all data is transmitted.
}

void uartTransmitS(char *p)
{
	while(*p)
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <main+0x64>
 1bc:	31 96       	adiw	r30, 0x01	; 1
	UBRRL = 51;				// Set baud rate (9600)
}

void uartTransmitC(unsigned char data)
{
	UDR = data;							// Putting data into *U*ART *D*ata *R*egister
 1be:	8c b9       	out	0x0c, r24	; 12
	while (bit_is_clear(UCSRA, UDRE));	// Wait until all data is transmitted.
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <main+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	87 ec       	ldi	r24, 0xC7	; 199
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x56>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x5c>
 1ce:	00 00       	nop
}

void uartTransmitS(char *p)
{
	while(*p)
 1d0:	81 91       	ld	r24, Z+
 1d2:	81 11       	cpse	r24, r1
 1d4:	f4 cf       	rjmp	.-24     	; 0x1be <main+0x4c>
		for (int i = 0; i < 6; i++)
		{
			getButtons(i);
		}
		
		for (int i = 0; i < 6; i++)
 1d6:	0a 17       	cp	r16, r26
 1d8:	1b 07       	cpc	r17, r27
 1da:	59 f7       	brne	.-42     	; 0x1b2 <main+0x40>
	UBRRL = 51;				// Set baud rate (9600)
}

void uartTransmitC(unsigned char data)
{
	UDR = data;							// Putting data into *U*ART *D*ata *R*egister
 1dc:	fc b8       	out	0x0c, r15	; 12
	while (bit_is_clear(UCSRA, UDRE));	// Wait until all data is transmitted.
 1de:	5d 9b       	sbis	0x0b, 5	; 11
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <main+0x6c>
			uartTransmitS(dataToMPU[i]);
		}
		uartTransmitC('\r');
		for (int i = 0; i < 6; i++)
		{
			dataToMPU[i] = 0x00;
 1e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ee:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1f2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 1f6:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1fa:	d1 cf       	rjmp	.-94     	; 0x19e <main+0x2c>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
